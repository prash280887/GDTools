jobs:
  - deployment: Deploy_WebJobs
    pool:
     name: 'virtuosoinfra1'
    environment: ${{parameters.env}}
    strategy:
      runOnce:
        deploy:
          steps:

          - script: echo '##vso[task.setvariable variable=env]${{parameters.env}}
            displayName: 'Set Environment Variable'

          - powershell: |
              $date=$(Get-Date -Format g);
              Write-Host "##vso[task.setvariable variable=creationDate]$date"
            displayName: 'Set Date Tag'

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: DropAppArtifacts
              downloadPath: '$(System.ArtifactsDirectory)'
              buildType: 'current'
              downloadType: 'single'                      
           
          - task: AzurePowerShell@2
            displayName: CompassOneApiIntegrationJob
            inputs:
              azureSubscription: VWW-DEV-Subscription-Service-Connection
              ScriptPath: '$(Agent.BuildDirectory)/Drop/Scripts/cronwebjob.ps1'
              ScriptArguments: '-Zipfilelocation "$(System.ArtifactsDirectory)\DropAppArtifacts\CompassOneApiIntegrationJob\CompassOneApiIntegrationJob.zip" -jobname "CompassOneApiIntegrationJobtest" -WebsiteName "$(webjob_name)" -jobtype "Triggered" -rgname "$(resourceGroupApp)"'
              azurePowerShellVersion: LatestVersion
            continueOnError: true
            condition: succeededOrFailed()  
          - task: AzurePowerShell@2
            displayName: CompassOneRiskProcessorJob
            inputs:
              azureSubscription: VWW-DEV-Subscription-Service-Connection
              ScriptPath: '$(Agent.BuildDirectory)/Drop/Scripts/continuous.ps1'
              ScriptArguments: '-Zipfilelocation "$(System.ArtifactsDirectory)\DropAppArtifacts\CompassOneRiskProcessorJob\CompassOneRiskProcessorJob.zip" -jobname "CompassOneRiskProcessorJobtest" -WebsiteName "$(webjob_name)" -jobtype "continuous" -rgname "$(resourceGroupApp)"'
              azurePowerShellVersion: LatestVersion
            continueOnError: true
            condition: succeededOrFailed()
          - task: AzurePowerShell@2
            displayName: NonConsultingProjectsDataSync
            inputs:
              azureSubscription: VWW-DEV-Subscription-Service-Connection
              ScriptPath: '$(Agent.BuildDirectory)/Drop/Scripts/cronwebjob.ps1'
              ScriptArguments: '-Zipfilelocation "$(System.ArtifactsDirectory)\DropAppArtifacts\NonConsultingProjectsDataSync\NonConsultingProjectsDataSync.zip" -jobname "NonConsultingProjectsDataSynctest" -WebsiteName "$(webjob_name)" -jobtype "Triggered" -rgname "$(resourceGroupApp)"'
              azurePowerShellVersion: LatestVersion
            continueOnError: true
            condition: succeededOrFailed()
          - task: AzurePowerShell@2
            displayName: AuroraServiceBusListner
            inputs:
              azureSubscription: VWW-DEV-Subscription-Service-Connection
              ScriptPath: '$(Agent.BuildDirectory)/Drop/Scripts/continuous.ps1'
              ScriptArguments: '-Zipfilelocation "$(System.ArtifactsDirectory)\DropAppArtifacts\AuroraServiceBusListner\AuroraServiceBusListner.zip" -jobname "AuroraServiceBusListnertest" -WebsiteName "$(webjob_name)" -jobtype "continuous" -rgname "$(resourceGroupApp)"'
              azurePowerShellVersion: LatestVersion
            continueOnError: true
            condition: succeededOrFailed()
          - task: AzurePowerShell@2
            displayName: PublisherWebJob
            inputs:
              azureSubscription: VWW-DEV-Subscription-Service-Connection
              ScriptPath: '$(Agent.BuildDirectory)/Drop/Scripts/cronwebjob.ps1'
              ScriptArguments: '-Zipfilelocation "$(System.ArtifactsDirectory)\DropAppArtifacts\PublisherWebJob\PublisherWebJob.zip" -jobname "PublisherWebJobtest" -WebsiteName "$(webjob_name)" -jobtype "Triggered" -rgname "$(resourceGroupApp)"'
              azurePowerShellVersion: LatestVersion
            continueOnError: true
            condition: succeededOrFailed()
